"""empty message

Revision ID: 1cfa5699c29d
Revises: 
Create Date: 2019-05-14 22:41:20.466029

"""
from alembic import op
import sqlalchemy as sa
from moddoc.utils import GUID


# revision identifiers, used by Alembic.
revision = '1cfa5699c29d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('flag', sa.Integer(), nullable=False),
    sa.Column('default', sa.Boolean(), nullable=False),
    sa.Column('id', GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role')),
    sa.UniqueConstraint('name', name=op.f('uq_role_name'))
    )
    op.create_table('token_blacklist',
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('token_type', sa.String(length=10), nullable=False),
    sa.Column('user_identity', sa.String(length=50), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.Column('id', GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_token_blacklist'))
    )
    op.create_table('user',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email')),
    sa.UniqueConstraint('username', name=op.f('uq_user_username'))
    )
    op.create_table('document',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('body', sa.String(), nullable=True),
    sa.Column('owner_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('fk_document_owner_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_document'))
    )
    op.create_table('repository',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('owner_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('fk_repository_owner_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_repository')),
    sa.UniqueConstraint('name', name=op.f('uq_repository_name'))
    )
    op.create_table('user_to_role',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('user_id', GUID(), nullable=True),
    sa.Column('role_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_user_to_role_role_id_role')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_to_role_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_to_role'))
    )
    op.create_table('linked_repositories',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('repository_id', GUID(), nullable=True),
    sa.Column('document_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], name=op.f('fk_linked_repositories_document_id_document')),
    sa.ForeignKeyConstraint(['repository_id'], ['repository.id'], name=op.f('fk_linked_repositories_repository_id_repository')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_linked_repositories'))
    )
    op.create_table('module',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('body', sa.String(), nullable=False),
    sa.Column('repository_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['repository_id'], ['repository.id'], name=op.f('fk_module_repository_id_repository')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_module'))
    )
    op.create_table('repository_permission',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('repository_id', GUID(), nullable=True),
    sa.Column('user_id', GUID(), nullable=True),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('write', sa.Boolean(), nullable=False),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['repository_id'], ['repository.id'], name=op.f('fk_repository_permission_repository_id_repository')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_repository_permission_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_repository_permission'))
    )
    op.create_table('revision',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('body', sa.String(), nullable=True),
    sa.Column('revision_date', sa.DateTime(), nullable=True),
    sa.Column('document_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], name=op.f('fk_revision_document_id_document')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_revision'))
    )
    op.create_table('module_history',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('body', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('history_data', sa.DateTime(), nullable=True),
    sa.Column('module_id', GUID(), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_module_history_module_id_module')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_module_history'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('module_history')
    op.drop_table('revision')
    op.drop_table('repository_permission')
    op.drop_table('module')
    op.drop_table('linked_repositories')
    op.drop_table('user_to_role')
    op.drop_table('repository')
    op.drop_table('document')
    op.drop_table('user')
    op.drop_table('token_blacklist')
    op.drop_table('role')
    # ### end Alembic commands ###
